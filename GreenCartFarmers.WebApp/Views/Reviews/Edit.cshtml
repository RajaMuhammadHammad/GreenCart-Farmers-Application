@model GreenCartFarmers.WebApp.Review
@{
    ViewBag.Title = "Edit Review";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            <!-- Header Section -->
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">
                        <i class="fas fa-edit me-2"></i>
                        Edit Review
                    </h3>
                </div>

                <div class="card-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.ReviewId)

                        <!-- Validation Summary -->
                        if (!ViewData.ModelState.IsValid)
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Please correct the following errors:</strong>
                                @Html.ValidationSummary(true, "", new { @class = "mb-0 mt-2" })
                            </div>
                        }

                        <div class="row">
                            <!-- Product Selection -->
                            <div class="col-md-6 mb-4">
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="fas fa-leaf text-success me-2"></i>
                                        Product
                                    </label>
                                    @Html.DropDownList("ProductId", null, "Select a Product", new
                                    {
                                        @class = "form-select form-control",
                                        @id = "productSelect"
                                    })
                                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger small" })
                                </div>
                            </div>

                            <!-- User Selection -->
                            <div class="col-md-6 mb-4">
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="fas fa-user text-info me-2"></i>
                                        Reviewer
                                    </label>
                                    @Html.DropDownList("UserId", null, "Select a User", new
                                    {
                                        @class = "form-select form-control",
                                        @id = "userSelect"
                                    })
                                    @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger small" })
                                </div>
                            </div>
                        </div>

                        <!-- Rating Section -->
                        <div class="mb-4">
                            <label class="form-label">
                                <i class="fas fa-star text-warning me-2"></i>
                                Rating
                            </label>
                            <div class="rating-input-container">
                                <div class="star-rating" id="starRating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="fas fa-star star-input" data-rating="@i"></i>
                                    }
                                </div>
                                @Html.HiddenFor(model => model.Rating, new { @id = "ratingValue" })
                                <span class="rating-text ms-3" id="ratingText">Click stars to rate</span>
                            </div>
                            @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger small" })
                        </div>

                        <!-- Comment Section -->
                        <div class="mb-4">
                            <label class="form-label">
                                <i class="fas fa-comment-dots text-primary me-2"></i>
                                Review Comment
                            </label>
                            @Html.TextAreaFor(model => model.Comment, new
                            {
                                @class = "form-control",
                                @rows = "4",
                                @placeholder = "Share your experience with this product...",
                                @id = "commentTextarea"
                            })
                            <div class="form-text">
                                <span id="charCount">0</span> characters
                            </div>
                            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger small" })
                        </div>

                        <!-- Created At -->
                        <div class="mb-4">
                            <label class="form-label">
                                <i class="fas fa-calendar-alt text-secondary me-2"></i>
                                Date Created
                            </label>
                            @Html.EditorFor(model => model.CreatedAt, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control",
                                    @type = "datetime-local"
                                }
                            })
                            @Html.ValidationMessageFor(model => model.CreatedAt, "", new { @class = "text-danger small" })
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between align-items-center pt-3 border-top">
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="fas fa-save me-2"></i>
                                Save Changes
                            </button>
                            @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-outline-secondary" })
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
    }

    .form-control, .form-select {
        border: 2px solid #e9ecef;
        border-radius: 0.375rem;
        padding: 0.75rem;
        font-size: 1rem;
        transition: all 0.2s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .star-rating {
        font-size: 1.5rem;
        display: inline-block;
    }

    .star-input {
        color: #dee2e6;
        cursor: pointer;
        transition: color 0.2s ease;
        margin-right: 0.25rem;
    }

    .star-input:hover,
    .star-input.active {
        color: #ffc107;
    }

    .rating-input-container {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        border: 2px solid #e9ecef;
    }

    .rating-text {
        font-size: 0.9rem;
        color: #6c757d;
        font-weight: 500;
    }

    .card {
        border: none;
        border-radius: 0.5rem;
    }

    .card-header {
        border-radius: 0.5rem 0.5rem 0 0 !important;
        padding: 1rem 1.5rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
        text-decoration: none;
        border: none;
        transition: all 0.2s ease;
    }

    .btn:hover {
        text-decoration: none;
        transform: translateY(-1px);
    }

    .btn-success {
        background: linear-gradient(45deg, #28a745, #20c997);
    }

    .btn-success:hover {
        background: linear-gradient(45deg, #218838, #1ea673);
    }

    .alert {
        border-radius: 0.375rem;
        border: none;
        margin-bottom: 1.5rem;
    }

    .text-danger {
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .form-text {
        font-size: 0.875rem;
        color: #6c757d;
        margin-top: 0.25rem;
    }

    textarea.form-control {
        resize: vertical;
        min-height: 100px;
    }

    @@media (max-width: 768px) {
        .d-flex {
            flex-direction: column;
            gap: 1rem;
        }

        .btn {
            width: 100%;
            text-align: center;
        }

        .star-rating {
            font-size: 1.25rem;
        }

        .rating-input-container {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Star Rating Functionality
        const stars = document.querySelectorAll('.star-input');
        const ratingValue = document.getElementById('ratingValue');
        const ratingText = document.getElementById('ratingText');

        // Set initial rating from model
        const currentRating = parseInt(ratingValue.value) || 0;
        updateStars(currentRating);

        stars.forEach((star, index) => {
            star.addEventListener('click', function () {
                const rating = index + 1;
                ratingValue.value = rating;
                updateStars(rating);
                ratingText.textContent = `${rating} out of 5 stars`;
            });

            star.addEventListener('mouseenter', function () {
                const rating = index + 1;
                highlightStars(rating);
            });
        });

        document.getElementById('starRating').addEventListener('mouseleave', function () {
            updateStars(parseInt(ratingValue.value) || 0);
        });

        function updateStars(rating) {
            stars.forEach((star, index) => {
                if (index < rating) {
                    star.classList.add('active');
                } else {
                    star.classList.remove('active');
                }
            });

            if (rating > 0) {
                ratingText.textContent = `${rating} out of 5 stars`;
            } else {
                ratingText.textContent = 'Click stars to rate';
            }
        }

        function highlightStars(rating) {
            stars.forEach((star, index) => {
                if (index < rating) {
                    star.style.color = '#ffc107';
                } else {
                    star.style.color = '#dee2e6';
                }
            });
        }

        // Character Counter for Comment
        const commentTextarea = document.getElementById('commentTextarea');
        const charCount = document.getElementById('charCount');

        function updateCharCount() {
            const count = commentTextarea.value.length;
            charCount.textContent = count;

            if (count > 500) {
                charCount.style.color = '#dc3545';
            } else if (count > 400) {
                charCount.style.color = '#fd7e14';
            } else {
                charCount.style.color = '#6c757d';
            }
        }

        commentTextarea.addEventListener('input', updateCharCount);
        updateCharCount(); // Initial count

        // Form Validation Enhancement
        const form = document.querySelector('form');
        const requiredFields = document.querySelectorAll('select[required], input[required], textarea[required]');

        form.addEventListener('submit', function (e) {
            let isValid = true;

            // Check if rating is selected
            if (!ratingValue.value || ratingValue.value === '0') {
                isValid = false;
                ratingText.textContent = 'Please select a rating';
                ratingText.style.color = '#dc3545';
            }

            if (!isValid) {
                e.preventDefault();
            }
        });
    });
</script>

<!-- Include Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<!-- Include Bootstrap if not already included -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">