@model GreenCartFarmers.WebApp.Order
@{
    ViewBag.Title = "Order Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .order-details-container {
        max-width: 1000px;
        margin: 20px auto;
        padding: 0 20px;
    }

    .page-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
    }

    .page-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(90deg, #4CAF50, #45a049, #2196F3, #1976D2);
        animation: shimmer 3s ease-in-out infinite;
    }

    @@keyframes shimmer {
        0%, 100% { transform: translateX(-100%); }
        50% { transform: translateX(100%); }
    }

    .header-content {
        display: flex;
        align-items: center;
        justify-content: between;
        flex-wrap: wrap;
        gap: 20px;
    }

    .header-left {
        display: flex;
        align-items: center;
        flex: 1;
    }

    .header-icon {
        width: 70px;
        height: 70px;
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 20px;
        box-shadow: 0 10px 30px rgba(76, 175, 80, 0.3);
        position: relative;
    }

    .header-icon::after {
        content: '📋';
        font-size: 1.8rem;
        animation: bounce 2s ease-in-out infinite;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
        40% { transform: translateY(-10px); }
        60% { transform: translateY(-5px); }
    }

    .header-text h1 {
        font-size: 2.2rem;
        font-weight: bold;
        color: #2c3e50;
        margin: 0 0 5px 0;
        background: linear-gradient(135deg, #2c3e50, #34495e);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .header-text p {
        color: #7f8c8d;
        font-size: 1.1rem;
        margin: 0;
        font-weight: 500;
    }

    .back-btn {
        background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 50px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 5px 15px rgba(108, 117, 125, 0.3);
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .back-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
        color: white;
        text-decoration: none;
    }

    .order-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 25px;
        overflow: hidden;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .card-header-custom {
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        color: white;
        padding: 25px 30px;
        position: relative;
        overflow: hidden;
    }

    .card-header-custom::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="dots" width="20" height="20" patternUnits="userSpaceOnUse"><circle cx="10" cy="10" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23dots)"/></svg>');
        opacity: 0.5;
    }

    .card-header-custom h4 {
        margin: 0;
        font-weight: 600;
        font-size: 1.4rem;
        position: relative;
        z-index: 1;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .card-body-custom {
        padding: 40px 30px;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 25px;
        margin-bottom: 25px;
    }

    .info-item {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
        padding: 25px;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        border: 2px solid transparent;
        position: relative;
        overflow: hidden;
    }

    .info-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #4CAF50, #2196F3, #FF9800);
        transform: translateX(-100%);
        transition: transform 0.5s ease;
    }

    .info-item:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        border-color: rgba(76, 175, 80, 0.3);
    }

    .info-item:hover::before {
        transform: translateX(0);
    }

    .info-content {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .info-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: white;
        position: relative;
        overflow: hidden;
    }

    .info-icon.order-id {
        background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
    }

    .info-icon.order-date {
        background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
    }

    .info-icon.order-status {
        background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
    }

    .info-icon::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.3);
        transform: translate(-50%, -50%);
        transition: all 0.5s ease;
    }

    .info-item:hover .info-icon::after {
        width: 100%;
        height: 100%;
    }

    .info-text h6 {
        margin: 0 0 5px 0;
        color: #7f8c8d;
        font-size: 0.85rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .info-text h3,
    .info-text h4,
    .info-text h5 {
        margin: 0;
        color: #2c3e50;
        font-weight: 700;
    }

    .info-text small {
        color: #95a5a6;
        font-style: italic;
    }

    .status-section {
        grid-column: 1 / -1;
        background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
        border-radius: 20px;
        padding: 30px;
        border: 2px solid rgba(255, 193, 7, 0.2);
        position: relative;
        overflow: hidden;
    }

    .status-section::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255, 193, 7, 0.1) 0%, transparent 70%);
        animation: rotate 10s linear infinite;
    }

    @@keyframes rotate {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .status-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 20px;
        position: relative;
        z-index: 1;
    }

    .status-left {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .status-badge {
        padding: 12px 25px;
        border-radius: 50px;
        font-weight: 700;
        font-size: 1.1rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        animation: glow 2s ease-in-out infinite alternate;
        position: relative;
        overflow: hidden;
    }

    .status-badge::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease;
    }

    .status-badge:hover::before {
        left: 100%;
    }

    .status-pending { background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%); color: white; }
    .status-confirmed { background: linear-gradient(135deg, #3498db 0%, #2980b9 100%); color: white; }
    .status-processing { background: linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%); color: white; }
    .status-shipped { background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%); color: white; }
    .status-delivered { background: linear-gradient(135deg, #27ae60 0%, #229954 100%); color: white; }
    .status-cancelled { background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%); color: white; }

    @@keyframes glow {
        0% { box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); }
        100% { box-shadow: 0 5px 25px rgba(0, 0, 0, 0.4); }
    }

    .bottom-actions {
        text-align: center;
        margin-top: 30px;
    }

    .main-back-btn {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        color: white;
        border: none;
        padding: 15px 40px;
        border-radius: 50px;
        text-decoration: none;
        font-weight: 700;
        font-size: 1.1rem;
        transition: all 0.3s ease;
        box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
        display: inline-flex;
        align-items: center;
        gap: 10px;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .main-back-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 35px rgba(76, 175, 80, 0.4);
        color: white;
        text-decoration: none;
    }

    @@media (max-width: 768px) {
        .order-details-container {
            padding: 0 15px;
        }

        .header-content {
            flex-direction: column;
            text-align: center;
        }

        .info-grid {
            grid-template-columns: 1fr;
        }

        .status-content {
            flex-direction: column;
            text-align: center;
        }

        .page-header {
            padding: 20px;
        }

        .card-body-custom {
            padding: 25px 20px;
        }

        .header-text h1 {
            font-size: 1.8rem;
        }
    }

    /* Accessibility improvements */
    .info-item:focus-within {
        outline: 3px solid rgba(76, 175, 80, 0.5);
        outline-offset: 2px;
    }

    .back-btn:focus,
    .main-back-btn:focus {
        outline: 3px solid rgba(76, 175, 80, 0.5);
        outline-offset: 2px;
    }

    /* Animation for page load */
    .order-details-container > * {
        animation: fadeInUp 0.6s ease-out;
    }

    .order-details-container > *:nth-child(2) {
        animation-delay: 0.2s;
    }

    .order-details-container > *:nth-child(3) {
        animation-delay: 0.4s;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="order-details-container">
    <!-- Enhanced Header Section -->
    <div class="page-header">
        <div class="header-content">
            <div class="header-left">
                <div class="header-icon"></div>
                <div class="header-text">
                    <h1>Order Details</h1>
                    <p>Order #@Model.OrderId</p>
                </div>
            </div>
            <div class="header-right">
                @Html.ActionLink("← Back to Orders", "Index", null, new { @class = "back-btn" })
            </div>
        </div>
    </div>

    <!-- Enhanced Order Information Card -->
    <div class="order-card">
        <div class="card-header-custom">
            <h4>
                🛍️ Order Information
            </h4>
        </div>
        <div class="card-body-custom">
            <div class="info-grid">
                <!-- Order ID -->
                <div class="info-item">
                    <div class="info-content">
                        <div class="info-icon order-id">
                            #
                        </div>
                        <div class="info-text">
                            <h6>Order ID</h6>
                            <h3>#@Model.OrderId</h3>
                        </div>
                    </div>
                </div>

                <!-- Order Date -->
                <div class="info-item">
                    <div class="info-content">
                        <div class="info-icon order-date">
                            📅
                        </div>
                        <div class="info-text">
                            <h6>Order Date</h6>
                            <h4>@Model.OrderDate?.ToString("MMM dd, yyyy") ?? "N/A"</h4>
                            <small>@Model.OrderDate?.ToString("dddd") ?? ""</small>
                        </div>
                    </div>
                </div>

                <!-- Order Status -->
                <div class="status-section">
                    <div class="status-content">
                        <div class="status-left">
                            <div class="info-icon order-status">
                                ℹ️
                            </div>
                            <div class="info-text">
                                <h6>Current Status</h6>
                                <h3>@Model.Status</h3>
                            </div>
                        </div>
                        <div class="status-right">
                            @{
                                string statusClass = "pending";
                                string statusIcon = "⏰";

                                switch (Model.Status?.ToLower())
                                {
                                    case "pending":
                                        statusClass = "pending";
                                        statusIcon = "⏰";
                                        break;
                                    case "confirmed":
                                    case "processing":
                                        statusClass = "confirmed";
                                        statusIcon = "⚙️";
                                        break;
                                    case "shipped":
                                    case "out for delivery":
                                        statusClass = "shipped";
                                        statusIcon = "🚚";
                                        break;
                                    case "delivered":
                                    case "completed":
                                        statusClass = "delivered";
                                        statusIcon = "✅";
                                        break;
                                    case "cancelled":
                                    case "rejected":
                                        statusClass = "cancelled";
                                        statusIcon = "❌";
                                        break;
                                }
                            }
                            <span class="status-badge status-@statusClass">
                                @statusIcon @Model.Status
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Bottom Actions -->
    <div class="bottom-actions">
        @Html.ActionLink("← Back to My Orders", "Index", null, new { @class = "main-back-btn" })
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add ripple effect to buttons
        const buttons = document.querySelectorAll('.back-btn, .main-back-btn');
        buttons.forEach(button => {
            button.addEventListener('click', function(e) {
                const ripple = document.createElement('span');
                const rect = this.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;

                ripple.style.width = ripple.style.height = size + 'px';
                ripple.style.left = x + 'px';
                ripple.style.top = y + 'px';
                ripple.style.position = 'absolute';
                ripple.style.borderRadius = '50%';
                ripple.style.background = 'rgba(255, 255, 255, 0.3)';
                ripple.style.transform = 'scale(0)';
                ripple.style.animation = 'ripple 0.6s linear';
                ripple.style.pointerEvents = 'none';

                this.appendChild(ripple);

                setTimeout(() => {
                    ripple.remove();
                }, 600);
            });
        });

        // Add parallax effect to info items
        const infoItems = document.querySelectorAll('.info-item');

        window.addEventListener('scroll', () => {
            const scrolled = window.pageYOffset;
            const rate = scrolled * -0.5;

            infoItems.forEach((item, index) => {
                const offset = rate * (index + 1) * 0.1;
                item.style.transform = `translateY(${offset}px)`;
            });
        });

        // Add intersection observer for animations
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                }
            });
        });

        document.querySelectorAll('.info-item, .order-card').forEach(el => {
            observer.observe(el);
        });
    });
</script>

<style>
    @@keyframes ripple {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }
</style>